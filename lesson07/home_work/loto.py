__author__ = "Вторушин Марк Викторович"
"""
== Лото ==

Правила игры в лото.

Игра ведется с помощью специальных карточек, на которых отмечены числа,
и фишек (бочонков) с цифрами.

Количество бочонков — 90 штук (с цифрами от 1 до 90).

Каждая карточка содержит 3 строки по 9 клеток. В каждой строке по 5 случайных цифр,
расположенных по возрастанию. Все цифры в карточке уникальны. Пример карточки:

--------------------------
    9 43 62          74 90
 2    27    75 78    82
   41 56 63     76      86
--------------------------

В игре 2 игрока: пользователь и компьютер. Каждому в начале выдается
случайная карточка.

Каждый ход выбирается один случайный бочонок и выводится на экран.
Также выводятся карточка игрока и карточка компьютера.

Пользователю предлагается зачеркнуть цифру на карточке или продолжить.
Если игрок выбрал "зачеркнуть":
	Если цифра есть на карточке - она зачеркивается и игра продолжается.
	Если цифры на карточке нет - игрок проигрывает и игра завершается.
Если игрок выбрал "продолжить":
	Если цифра есть на карточке - игрок проигрывает и игра завершается.
	Если цифры на карточке нет - игра продолжается.

Побеждает тот, кто первый закроет все числа на своей карточке.

Пример одного хода:

Новый бочонок: 70 (осталось 76)
------ Ваша карточка -----
 6  7          49    57 58
   14 26     -    78    85
23 33    38    48    71
--------------------------
-- Карточка компьютера ---
 7 87     - 14    11
      16 49    55 88    77
   15 20     -       76  -
--------------------------
Зачеркнуть цифру? (y/n)

Подсказка: каждый следующий случайный бочонок из мешка удобно получать
с помощью функции-генератора.

Подсказка: для работы с псевдослучайными числами удобно использовать
модуль random: http://docs.python.org/3/library/random.html

"""
# Импоритируем randit
from random import randint


# Создаем класс
class Card:
    def __init__(self, name):
        bag = [i for i in range(1, 91)]  # Генерим мешок с бочонками в количестве 90 штухх
        self.card = [__class__.gen_string(bag), __class__.gen_string(bag),
                     __class__.gen_string(bag)] # Массив со строками
        self.name = name
        self.count_cask = 15  # Количество циферок на карточке

    @staticmethod  # Можно было не юзать, но мы же проходили)
    def gen_string(bag):  # Генерим строки на карточке
        string = ['' for _ in range(9)]
        for i in range(8, 3, -1):  # Создаем по 8 элементов в строке из которых 3 пустые
            digit = randint(0, i)  # Номер заполненного элемента строки (циферки)
            while string[digit] != '':  # если элемент уже не пустой
                digit += 1
            string[digit] = bag.pop(randint(0, len(bag) - 1))
        return string

    def __str__(self):  # Оформление наших карточек
        result = '{:-^26}\n'.format(self.name)
        for i in range(3):  # Смещение и заполнение циферок
            result += '{:>2} {:>2} {:>2} {:>2} {:>2} {:>2} {:>2} {:>2} {:>2}' \
                       .format(*self.card[i]) + '\n'
        return result + '--------------------------'  # Заполнитель как в задании


player = Card('Игрок')
computer = Card('Компьютер')
bag = [i for i in range(1, 91)]
while True:
    if len(bag) < 1:  # Когда мешок закончился выводим сообщение
        print('Бочёнки закончились. Результат:\n''у компьютера осталось {} числа/чисел,\n'
              'у игрока осталось {} числа/чисел.'.format(computer.count_cask, player.count_cask))
        break  # И прерываем игру
    cask = bag.pop(randint(0, len(bag) - 1))
    print('\nНовый бочонок: {} (осталось {})'.format(cask, len(bag)))  # Это вывод инфы
    print(player)  # Это тоже вывод инфы
    print(computer)  # И это вывод инфы
    answer = input('Зачеркнуть цифру? (y/n/q)')  # Спрашиваем у игрока че хочет
    answer = answer.lower()  # Преобразуем в нижний регистр
    while len(answer) == 0 or answer not in 'ynq':  # Проверка на ввод белеберды
        print('\n\nНезивестный ввод\n')  # Вывод если белеберда
        print('Новый бочонок: {} (осталось {})'.format(cask, len(bag)))  # Снова вывод инфы
        print(computer)  # Снова инфа
        print(player)  # Снова инфа
        answer = input('Зачеркнуть цифру? (y/n/q)')  # После белеберды повторно спрашиваем
        answer = answer.lower()  # Снова преобразуем в нижний регистр
    if answer == 'q':  # Если q то давай до свидания!
        print('Давай досвидания!')  # Снова инфа
        break  # Завершаем игру
    elif answer == 'y':
        boo = False  # Так как у нас цикл (огромный как ниагарский водопад) True, тозаранее присваиваем переменной False, чтобы можнно было в нужный момент прервать игру
        for i in range(3):
            if cask in player.card[i]:  # Ищем совпадения в карточках игроков (выпавшего бочонка я имел ввиду)
                boo = True
                player.card[i][player.card[i].index(cask)] = '-'  # Выпал боченок у игрока? Чиркаем!
                player.count_cask -= 1
            if cask in computer.card[i]:
                computer.card[i][computer.card[i].index(cask)] = '-'  # Выпал боченок у компа? Чиркаем!
                computer.count_cask -= 1
        if boo:  # Проверяем у кого быстрее выпали все бочонки
            if player.count_cask < 1:
                print('Вы победили!')  # Ура ты выиграл
                break
            elif computer.count_cask < 1:
                print('Компьютер победил!')  # Ура ты не выиграл
                break
        else:
            print('Вы проиграли! Такого числа в вашей карточке нет')  # Надоело писать
            break
    elif answer == 'n':
        boo = False
        for i in range(3):
            if cask in player.card[i]:
                print('Вы проиграли! Такое число есть на вашей карточке!')
                test = True
                break
            if cask in computer.card[i]:
                computer.card[i][computer.card[i].index(cask)] = '-'
                computer.count_cask -= 1
        if boo:
            break
        if player.count_cask < 1:
            print('Вы выиграли!')
            break
        elif computer.count_cask < 1:
            print('Компьютер выиграл!')
            break